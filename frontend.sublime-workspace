{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"userSco",
				"userScoresGiven"
			],
			[
				"cou",
				"courseCode"
			],
			[
				"get",
				"getElementById"
			],
			[
				"getEle",
				"getElementById\t(elementId: string) => null | HTMLElement"
			],
			[
				"getEleem",
				"getElementsByClassName\t(classNames: string) => HTMLCollection<HTMLElement>"
			],
			[
				"map",
				"mapDispatchToProps\t(dispatch: any) => any"
			],
			[
				"commen",
				"commentEdit"
			],
			[
				"course",
				"coursePageState"
			],
			[
				"alert",
				"alertMsg"
			],
			[
				"user",
				"userID"
			],
			[
				"js",
				"jsonParser"
			],
			[
				"font",
				"font-weight-bold"
			],
			[
				"time",
				"timeCreated"
			],
			[
				"float-",
				"float-right"
			],
			[
				"refre",
				"refreshCourses"
			],
			[
				"app",
				"applySubmitButton"
			],
			[
				"aler",
				"alertLogin"
			],
			[
				"component",
				"componentDidMount"
			],
			[
				"sear",
				"searchGroup"
			],
			[
				"Reg",
				"RegisterPage"
			],
			[
				"trans",
				"transform"
			],
			[
				"break",
				"break-word"
			],
			[
				"userSc",
				"userScoresGiven"
			],
			[
				"comment",
				"comment_id"
			],
			[
				"invalid",
				"invalidLogin"
			],
			[
				"log",
				"loggedIn"
			],
			[
				"setIn",
				"setInvalidLog"
			],
			[
				"coursePage",
				"coursePageXML"
			],
			[
				"card",
				"cardsViewState"
			],
			[
				"set",
				"setInvalidLog"
			],
			[
				"in",
				"invalidLog"
			],
			[
				"l",
				"logInOrOut"
			],
			[
				"fet",
				"fetchFromAPI"
			],
			[
				"res",
				"resType"
			],
			[
				"filter",
				"filterState"
			],
			[
				"compl",
				"completeFetch"
			],
			[
				"fetch",
				"fetchesInProgress"
			],
			[
				"Course",
				"CourseContainer〔function〕"
			],
			[
				"Cou",
				"CourseWrapper〔function〕"
			],
			[
				"add",
				"addUserCourseScore"
			],
			[
				"Star",
				"StarRating"
			],
			[
				"courses",
				"coursesXSLT〔variable〕"
			],
			[
				"React",
				"ReactDOM"
			],
			[
				"jq",
				"jqueryTest"
			],
			[
				"clear",
				"clearSearchBar"
			],
			[
				"getElem",
				"getElementById〔function〕"
			],
			[
				"p",
				"p-2"
			],
			[
				"fun",
				"function〔keyword〕"
			],
			[
				"bod",
				"bodyParser〔variable〕"
			],
			[
				"class",
				"className"
			],
			[
				"acti",
				"activeFilter"
			],
			[
				"ac",
				"actionCreators"
			],
			[
				"SQL",
				"SQLquery〔variable〕"
			],
			[
				"showDep",
				"showDepartmentsHandler〔variable〕"
			],
			[
				"showDe",
				"showDepartmentsHandler〔variable〕"
			],
			[
				"with",
				"withStyles"
			],
			[
				"Expan",
				"ExpansionPanelDetails〔variable〕"
			],
			[
				"ExpansionPa",
				"ExpansionPanelDetails〔variable〕"
			],
			[
				"Expandmo",
				"ExpandMoreIcon"
			],
			[
				"Ex",
				"ExpansionPanelSummary"
			],
			[
				"Expansion",
				"ExpansionPanelSummary〔variable〕"
			],
			[
				"Expa",
				"ExpansionPanelSummary〔variable〕"
			],
			[
				"remoe",
				"removeFilterHandler〔variable〕"
			],
			[
				"getElement",
				"getElementsByTagName〔function〕"
			],
			[
				"coursesXS",
				"coursesXSLTFetched"
			],
			[
				"coursesXs",
				"coursesXSLTFetched"
			],
			[
				"applic",
				"applicationIntialState"
			],
			[
				"depar",
				"departmentsInitialState"
			],
			[
				"space",
				"space-around"
			],
			[
				"body",
				"bodyParser"
			],
			[
				"tag",
				"tagcontent"
			],
			[
				"padd",
				"padding"
			],
			[
				"flex",
				"flex-flow"
			],
			[
				"result",
				"resultDocument"
			],
			[
				"http",
				"XMLHttpRequest\t() XMLHttpRequest"
			],
			[
				"read",
				"readyState\t: unsigned short FileReader"
			],
			[
				"coure",
				"courses"
			],
			[
				"readaste",
				"readAsText\t( blob: Blob, label?: DOMString ): void FileReader"
			],
			[
				"create",
				"createElement\t( localName: DOMString ): Element Document"
			],
			[
				"align",
				"alignItems\t = 'flex-start' Style CSS"
			],
			[
				"alig",
				"alignContent\t = 'center' Style CSS"
			],
			[
				"Card",
				"CardHeader"
			],
			[
				"paddi",
				"padding-right"
			],
			[
				"fle",
				"flex-end"
			],
			[
				"space-",
				"space-between"
			],
			[
				"temp",
				"grid-template-rows"
			],
			[
				"grid-templ",
				"grid-template-columns"
			],
			[
				"cards",
				"cardsByID"
			],
			[
				"GET",
				"GET_COURSES_SUCCESS"
			],
			[
				"Cards",
				"CardsContainer"
			],
			[
				"props",
				"props\tReact: this.props"
			],
			[
				"onClick",
				"onClickKey"
			],
			[
				"load",
				"loadScreenWhileLoading"
			],
			[
				"loadScreen",
				"loadScreen"
			],
			[
				"getelem",
				"getElementById\t( elementId: DOMString ): Element Document"
			],
			[
				"elemen",
				"getElementById\t( elementId: DOMString ): Element Document"
			],
			[
				"id",
				"id\t: DOMString Element"
			],
			[
				"document",
				"documentElement\t: Element Document"
			],
			[
				"grid-tem",
				"grid-template-columns"
			],
			[
				"wid",
				"width\t = 'auto' Style CSS"
			],
			[
				"eleme",
				"getElementById\t( elementId: DOMString ): Element Document"
			],
			[
				"element",
				"cssElementMap\t: DOMElementMap Document"
			],
			[
				"max",
				"max-width"
			],
			[
				"fl",
				"flex-end"
			],
			[
				"align-",
				"align-self"
			],
			[
				"padding",
				"padding-top"
			],
			[
				"fe",
				"flex-start"
			],
			[
				"cons",
				"console_log"
			],
			[
				"st",
				"flex-start"
			],
			[
				"back",
				"background-color"
			],
			[
				"d",
				"display"
			],
			[
				"console",
				"console_log"
			],
			[
				"tran",
				"translateX()"
			],
			[
				"translate",
				"translateY()"
			],
			[
				"flex-",
				"flex-basis"
			],
			[
				"text",
				"text-align"
			],
			[
				"radi",
				"border-radius"
			],
			[
				"search",
				"SearchBar"
			],
			[
				"grid",
				"grid-template-columns"
			],
			[
				"column",
				"column-count"
			],
			[
				"paddin",
				"padding-bottom"
			],
			[
				"pos",
				"position"
			],
			[
				"word",
				"word-wrap"
			],
			[
				"grid-auto",
				"grid-auto-columns"
			],
			[
				"gird-col",
				"grid-template-columns"
			],
			[
				"bacground",
				"background-color"
			],
			[
				"background",
				"background-color"
			],
			[
				"border-",
				"border-color"
			]
		]
	},
	"buffers":
	[
		{
			"file": "src/containers/ProfilePage.js",
			"settings":
			{
				"buffer_size": 2026,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/components/ProfileSideBar.js",
			"settings":
			{
				"buffer_size": 482,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/components/ProfileInfo.js",
			"settings":
			{
				"buffer_size": 3847,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/store/Reducers.js",
			"settings":
			{
				"buffer_size": 12371,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/store/Actions.js",
			"settings":
			{
				"buffer_size": 4718,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\nconst mysql = require('mysql');\nconst xml = require('xml');\nconst path = require('path');\nconst request = require('request-promise');\n\nconst connection = mysql.createConnection({\n  host: 'localhost',\n  user: 'test',\n  password: 'cocacola',\n  database: 'ratemycoursedb',\n  multipleStatements: true,\n});\n\nconnection.connect();\n\n// Get all courses per department and write to Database.\nasync function getAllCourses(array) {\n  for (const department of array) {\n    const requestURL = `https://www.kth.se/api/kopps/v2/courses/${ department }.json`;\n    let courses = await request(requestURL);\n    courses = JSON.parse(courses);\n    for (const course of courses.courses) {\n      const SQLinsert = `INSERT IGNORE INTO course(code, name, score, href, depcode) VALUES('${ course.code }','${ course.title }', NULL, '/course/${ course.code }','${ department }')`;\n      connection.query(SQLinsert, (err, result) => {\n        if (err) { console.log(err); }\n      });\n    }\n  }\n  console.log('DONE UPDATIFYING!');\n  return true;\n}\n\n// Get all departmentcodes for loading courses from KTHs course API.\nasync function buildDB() {\n  console.log('STARTING UPDATE!');\n  const requestURL = 'https://www.kth.se/api/kopps/v2/departments.sv.json';\n  const codes = [];\n  let departments = await request(requestURL);\n  departments = JSON.parse(departments);\n  for (const department of departments) {\n    codes.push(department.code);\n  }\n  return getAllCourses(codes);\n}\n\napp.use((req, res, next) => {\n  res.header('Access-Control-Allow-Origin', '*');\n  res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');\n  next();\n});\n\napp.use(express.static(path.join(__dirname, 'public')));\n\n// Loading relevant data to the RMC database.\napp.get('/buildDB', (req, res) => {\n  const update = async () => {\n    const done = await buildDB();\n    if (done) {\n      res.send('><div>DATABASE UPDATED</div>');\n    }\n  };\n  update();\n});\n\napp.get('/search/query', (req, res) => {\n  const noRating = 'No rating';\n  let SQLquery = `SELECT code, name, score, href, depcode, count(coursecomment_id) as sumComments FROM course\n                  LEFT JOIN course_comment ON course.code = course_comment.course_code\n                     WHERE ( code LIKE '%${ req.query.srchstr }%' \n                     OR name LIKE '%${ req.query.srchstr }%') \n                     AND depcode IN (${ req.query.dep })\n                     GROUP BY code`;\n\n  if (req.query.srchstr === 'empty') {\n    SQLquery = `SELECT * FROM course WHERE depcode IN (${ req.query.dep })`;\n  }\n  console.log(SQLquery);\n  connection.query(SQLquery, (err, result) => {\n    if (err) { console.log(err); }\n    const data = '<courses>' + (result.length > 0 ? (result.map((row) => {\n      return (\n        xml({\n          course: [\n            {\n              _attr: { code: row.code },\n            },\n            { name: row.name },\n            { href: row.href },\n            { department: row.depcode },\n            { score: row.score ? (row.score) : (noRating) },\n            { sumComments: row.sumComments },\n          ],\n        })\n      );\n    }).join('')) : ('<nofound>No courses found</nofound>')) + '</courses>';\n    res.send(data);\n  });\n});\n\napp.get('/course/:courseCode', async(req, res) => {\n  const noRating = 'No rating';\n  const requestURL = `https://www.kth.se/api/kopps/v2/course/${ req.params.courseCode }`;\n\n  const SQLquery = `SELECT code, course.name, score, coursecomment_id, user.name as userName, user.user_id, text, timeCreated FROM course \n                      LEFT JOIN course_comment ON course.code = course_comment.course_code\n                      LEFT JOIN comment ON course_comment.coursecomment_id = comment.comment_id\n                      LEFT JOIN user ON course_comment.user_id = user.user_id\n                        WHERE code = '${ req.params.courseCode }'\n                      ORDER BY timeCreated DESC`;\n\n  const apidata = await request(requestURL).then((response) => { return JSON.parse(response); })\n      .catch((error) => error.toString());\n\n  connection.query(SQLquery, (err, result) => {\n    if (err) { console.log(err); }\n    const commentsSeen = [];\n    const comments = [];\n    for (const row of result) { \n      if (!commentsSeen.includes(row.coursecomment_id)) {\n        comments.push({ comment: [\n          { commentId: row.coursecomment_id },\n          { userID: row.user_id },\n          { userName: row.userName },\n          { commentText: row.text },\n          row.timeCreated ? { timeCreated: `${ row.timeCreated.getFullYear() }/${ row.timeCreated.getMonth() + 1 }/${ row.timeCreated.getDate() + 1 } - ${ row.timeCreated.getHours() }:${ row.timeCreated.getMinutes() }` } : (false),\n        ]});\n      }\n    }\n    const data =\n        xml({\n          course: [\n            { name: result[0].name },\n            { code: result[0].code },\n            { href: apidata.href.sv },\n            { courseWebUrl: apidata.courseWebUrl.sv },\n            { info: apidata.info.sv ? (apidata.info.sv) : ('No info found...') },\n            { level: apidata.level.sv },\n            { score: result[0].score ? (result[0].score) : (noRating) },\n            { comments: comments },\n          ],\n        });\n    res.send(data);\n  });\n});\n\nconst jsonParser = bodyParser.json();\n\napp.post('/user/validate', jsonParser, (req, res) => {\n  const SQLquery = `SELECT user.user_id, name, email, scores.course_code, score_given, course_comment.coursecomment_id FROM user \n                      LEFT JOIN scores ON user.user_id = scores.user_id\n                      LEFT JOIN course_comment ON user.user_id = course_comment.user_id\n                      LEFT JOIN comment ON course_comment.coursecomment_id = comment.comment_id\n                        WHERE ( name = '${ req.body.user }'\n                        OR email = '${ req.body.user }' )\n                        AND password = BINARY '${ req.body.password }';`;\n  console.log(SQLquery);\n  connection.query(SQLquery, (err, result) => {\n    if (err) { console.log(err); }\n    if (result.length > 0) {\n      const scoreSeen = [];\n      const commentSeen = [];\n      const userScoresGiven = {};\n      const userComments = [];\n      for (const row of result) {\n        if (!scoreSeen.includes(row.course_code) && row.course_code !== null) {\n          userScoresGiven[row.course_code] = row.score_given;\n          scoreSeen.push(row.course_code);\n        }\n        if (!commentSeen.includes(row.coursecomment_id) && row.coursecomment_id !== null) {\n          userComments.push(row.coursecomment_id);\n          commentSeen.push(row.coursecomment_id);\n        }\n      }\n      const data = {\n        userId: result[0].user_id,\n        userName: result[0].name,\n        userEmail: result[0].email,\n        userScoresGiven: userScoresGiven,\n        userComments: userComments,\n      };\n      res.json({\n        reply: true,\n        data: data,\n      });\n    } else {\n      res.json({\n        reply: false,\n        data: {},\n      });\n    }\n  });\n});\n\napp.post('/user/submitscore', jsonParser, (req, res) => {\n  console.log(req.body);\n  const SQLquery = `REPLACE INTO scores (user_id, course_code, score_given) \n                    VALUES (${ req.body.userID }, '${ req.body.courseCode }', ${ req.body.score })`;\n  connection.query(SQLquery, (err, result) => {\n    if (err) { console.log(err); }\n    res.send({ courseCode: req.body.courseCode, userScore: req.body.score });\n  });\n});\n\napp.get('/kthapi/departments', (req, res) => {\n  const requestURL = 'https://www.kth.se/api/kopps/v2/departments.sv.json';\n  request(requestURL).then((response) => {\n    res.json(response);\n  })\n  .catch((error) => error.toString());\n});\n\n// --\n\n\nfunction getSQLerrorMsg(SQLerror, name, email) {\n  const SQLerrorMsg = SQLerror.sqlMessage;\n  let errorMsg = 'no SQL-error';\n  if (SQLerrorMsg.includes('name_UNIQUE')) {\n    errorMsg = 'The user name ' + name + ' is already taken!';\n  } else if (SQLerrorMsg.includes('name_TOO_SHORT') || SQLerrorMsg.includes('name_TOO_LONG')) {\n    errorMsg = 'Your user name must be between 3 and 25 characters!';\n  } else if (SQLerrorMsg.includes('email_UNIQUE')) {\n    errorMsg = 'Another user is already registred with the email ' + email;\n  } else if (SQLerrorMsg.includes('email_INVALID')) {\n    errorMsg = email + ' is not a KTH-e-mail adress!';\n  } else if (SQLerrorMsg.includes('email_TOO_SHORT')) {\n    errorMsg = email + ' is not a valid e-mail adress';\n  } else if (SQLerrorMsg.includes('password_TOO_SHORT')) {\n    errorMsg = 'Your password has to be atleast 6 characters!';\n  } else if (SQLerrorMsg.includes('password_TOO_LONG')) {\n    errorMsg = 'Your password can not be larger than 48 characters!';\n  } else if (SQLerrorMsg.includes('name_NONE_ALPHANUM')) {\n    errorMsg = 'Your nick name can only contain letters and digits between A-Z / 0-9';\n  }\n  return errorMsg;\n}\n\n\nfunction sendUserInsertResult(resultData, res) {\n  const scoreSeen = [];\n  const commentSeen = [];\n  const userScoresGiven = {};\n  const userComments = [];\n  for (const row of resultData) {\n    if (!scoreSeen.includes(row.course_code) && row.course_code !== null) {\n      userScoresGiven[row.course_code] = row.score_given;\n      scoreSeen.push(row.course_code);\n    }\n    if (!commentSeen.includes(row.coursecomment_id) && row.coursecomment_id !== null) {\n      userComments.push(row.coursecomment_id);\n      commentSeen.push(row.coursecomment_id);\n    }\n  }\n  const data = {\n    userId: resultData[0].user_id,\n    userName: resultData[0].name,\n    userEmail: resultData[0].email,\n    userScoresGiven: userScoresGiven,\n    userComments: userComments,\n  };\n  res.json({\n    reply: true,\n    data: data,\n    error: null,\n  });\n}\n\nfunction sendUserError(errorMsg, res) {\n  res.json({\n    reply: false,\n    data: null,\n    error: errorMsg,\n  });\n}\n\nfunction sendUserAlterResult(resultData, res, userid) {\n  const data = {\n    userId: userid,\n    userName: resultData[0].name,\n    userEmail: resultData[0].email,\n  };\n  res.json({\n    reply: true,\n    data: data,\n    error: null,\n  });\n}\n\n\napp.post('/user/reguser', jsonParser, (req, res) => {\n  const [name, email, pass1, pass2, currentUserid, reg] = [req.body.newUser, req.body.newEmail, req.body.newPassword1, req.body.newPassword2, req.body.userID, req.body.reg];\n  console.log(name, email, pass1, pass2, currentUserid, reg);\n  let errorMsg = false;\n  let SQLquery;\n  let SQLgetID;\n  if (pass1 === pass2) {\n    if (reg) {\n      SQLquery = `INSERT INTO user (name, email, password) VALUES ('${ name }', '${ email }', '${ pass1 }');`;\n      connection.query(SQLquery, (SQLError) => {\n        if (SQLError) {\n          errorMsg = getSQLerrorMsg(SQLError, name, email);\n          sendUserError(errorMsg, res);\n        } else {\n          SQLgetID = 'SELECT LAST_INSERT_ID()';\n          connection.query(SQLgetID, (getIDerr, getIDres) => {\n            if (getIDerr) {\n              errorMsg = getIDerr.sqlMessage;\n              sendUserError(errorMsg, res);\n            } else {\n              const newUserid = parseInt(JSON.stringify(getIDres[0]).replace(/\\D/g, ''), 10);\n              const SQLgetData = `SELECT * FROM user WHERE user_id = ${ newUserid }`;\n              connection.query(SQLgetData, (getDataErr, resultData) => {\n                if (getDataErr) {\n                  errorMsg = getDataErr.sqlMessage;\n                  sendUserError(errorMsg, res);\n                } else {\n                  sendUserInsertResult(resultData, res);\n                }\n              });\n            }\n          });\n        }\n      });\n    } else {\n      SQLquery = `UPDATE user SET name = '${ name }', email = '${ email }', password = '${ pass1 }' WHERE user_id = ${ currentUserid }`;\n      connection.query(SQLquery, (SQLError) => {\n        if (SQLError) {\n          errorMsg = getSQLerrorMsg(SQLError, name, email);\n          sendUserError(errorMsg, res);\n        } else {\n          const SQLgetData = `SELECT * FROM user WHERE user_id = ${ currentUserid }`;\n          connection.query(SQLgetData, (getDataErr, resultData) => {\n            if (getDataErr) {\n              errorMsg = getDataErr.sqlMessage;\n              sendUserError(errorMsg, res);\n            } else {\n              sendUserAlterResult(resultData, res, currentUserid);\n            }\n          });\n        }\n      });\n    }\n  } else {\n    errorMsg = 'Password fields doesn\\'t match';\n    sendUserError(errorMsg, res);\n  }\n});\n\n\nfunction addslashes(str) {\n  return (str + '')\n  .replace(/[\\\\\"']/g, '\\\\$&')\n  .replace(/\\u0000/g, '\\\\0')\n  .replace(/\\n\\r?/g, '<br />');\n}\n\napp.post('/course/addcomment', jsonParser, (req, res) => {\n  const escapedText = addslashes(req.body.commentText);\n  const SQLquery = `START TRANSACTION;\n                    INSERT INTO comment (text)\n                      VALUES ('${ escapedText }');\n                    INSERT INTO course_comment (coursecomment_id, course_code, user_id) \n                      VALUES (last_insert_id(), '${ req.body.courseCode }', ${ req.body.userId });\n                    COMMIT;`;\n  console.log(SQLquery);\n  connection.query(SQLquery, (err, result) => {\n    if (err) { console.log(err) }\n    console.log(JSON.stringify(result));\n    res.send({ commentId: result[1].insertId, courseCode: req.body.courseCode });\n  });\n});\n\napp.post('/course/editcomment', jsonParser, (req, res) => {\n  const escapedText = addslashes(req.body.commentText);\n  const SQLquery = ` UPDATE comment SET text = '${ escapedText }' WHERE comment_id = ${ req.body.commentId }`;\n  console.log(SQLquery);\n  connection.query(SQLquery, (err, result) => {\n    if (err) { console.log(err) }\n    res.send(true);\n  });\n});\n\napp.post('/course/removecomment', jsonParser, (req, res) => {\n  const escapedText = addslashes(req.body.commentText);\n  const SQLquery = ` DELETE FROM course_comment WHERE coursecomment_id = ${ req.body.commentId }`;\n  console.log(SQLquery);\n  connection.query(SQLquery, (err, result) => {\n    if (err) { console.log(err) }\n    res.send({ commentId: req.body.commentId });\n  });\n});\n\n\n\n\napp.listen(3000, () => console.log('server API listening on port 3000!'));",
			"file": "/D/Programming/Projekt/ratemycourse/backend/src/server.js",
			"file_size": 14835,
			"file_write_time": 131615382285440187,
			"settings":
			{
				"buffer_size": 14153,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Anaconda Python Builder",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Anaconda Python Builder",
				""
			]
		],
		[
			[
				[
					"Packages/Markdown Preview/Markdown.sublime-build",
					""
				],
				[
					"Packages/SublimeREPL/sublimerepl_build_system_hack.sublime-build",
					""
				]
			],
			[
				"Packages/Markdown Preview/Markdown.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 357.0,
		"last_filter": "git ",
		"selected_items":
		[
			[
				"git ",
				"Git: Quick Add"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"git push",
				"Git: Push"
			],
			[
				"qui",
				"Git: Quick Commit"
			],
			[
				"pull",
				"Git: Pull"
			],
			[
				"push",
				"Git: Push"
			],
			[
				"quic",
				"Git: Quick Commit"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"git pull",
				"Git: Pull"
			],
			[
				"git qu",
				"Git: Quick Commit"
			],
			[
				"babel",
				"Set Syntax: JavaScript (Babel)"
			],
			[
				"babe",
				"Set Syntax: JavaScript (Babel)"
			],
			[
				"x",
				"Set Syntax: XML"
			],
			[
				"codeinte",
				"SublimeCodeIntel: Enable Live Autocompletion for Current Language"
			],
			[
				"sass",
				"Set Syntax: Sass"
			],
			[
				"remo",
				"Package Control: Remove Package"
			],
			[
				"java",
				"Set Syntax: JavaScript (Babel)"
			],
			[
				"quick",
				"Git: Quick Commit"
			],
			[
				"xml",
				"Set Syntax: XML"
			],
			[
				"php",
				"Set Syntax: PHP"
			],
			[
				"color",
				"Color Picker"
			],
			[
				"remove packa",
				"Package Control: Remove Package"
			],
			[
				"javasc",
				"Set Syntax: JavaScript (Babel)"
			],
			[
				"javas",
				"Set Syntax: JavaScript (Babel)"
			],
			[
				"javasci",
				"Set Syntax: JavaScript (Babel)"
			],
			[
				"commit",
				"Git: Commit"
			],
			[
				"insata",
				"Package Control: Install Package"
			],
			[
				"comm",
				"Git: Quick Commit"
			],
			[
				"pus",
				"Git: Push"
			],
			[
				"white",
				"Whitespace: Remove Trailing Whitespace"
			],
			[
				"Package Control: remove",
				"Package Control: Remove Package"
			],
			[
				"Package Control: di",
				"Package Control: Disable Package"
			],
			[
				"boxy",
				"Boxy Theme: Configuration"
			],
			[
				"install pa",
				"Package Control: Install Package"
			],
			[
				"git",
				"Git: Commit"
			],
			[
				"instlal",
				"Package Control: Install Package"
			],
			[
				"remove ",
				"Package Control: Remove Package"
			],
			[
				"package",
				"Package Control: Remove Package"
			],
			[
				"Package Control: isntal",
				"Package Control: Install Package"
			],
			[
				"pac",
				"Package Control: Install Package"
			],
			[
				"package insta",
				"Package Control: Install Package"
			],
			[
				"install package",
				"Package Control: Install Package"
			],
			[
				"packag",
				"Install Package Control"
			]
		],
		"width": 558.0
	},
	"console":
	{
		"height": 454.0,
		"history":
		[
			"sublime.log_commands(False)",
			"sublime.log_commands(True)",
			"\\clear",
			"clear",
			"import urllib.request,os,hashlib; h = '6f4c264a24d933ce70df5dedcf1dcaee' + 'ebe013ee18cced0ef93d5f746d80ef60'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)",
			"eslint --init",
			"eslint --init # if eslint is global",
			"which node"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/D/Programming/Projekt/ratemycourse",
		"/D/Programming/Projekt/ratemycourse/frontend",
		"/D/Programming/Projekt/ratemycourse/frontend/src",
		"/D/Programming/Projekt/ratemycourse/frontend/src/components",
		"/D/Programming/Projekt/ratemycourse/frontend/src/containers",
		"/D/Programming/Projekt/ratemycourse/frontend/src/enhancers",
		"/D/Programming/Projekt/ratemycourse/frontend/src/scss",
		"/D/Programming/Projekt/ratemycourse/frontend/src/store"
	],
	"file_history":
	[
		"/D/Programming/Projekt/ratemycourse/frontend/src/containers/CoursePage.js",
		"/D/Programming/Projekt/ratemycourse/frontend/src/enhancers/applyEditCommentComponent.js",
		"/D/Programming/Projekt/ratemycourse/frontend/src/components/CourseView.js",
		"/D/Programming/Projekt/ratemycourse/frontend/src/enhancers/InjectSubmitButton.js",
		"/D/Programming/Projekt/ratemycourse/frontend/src/enhancers/InjectCommentEditButtons.js",
		"/D/Programming/Projekt/ratemycourse/backend/src/public/coursepage.xsl",
		"/D/Programming/Projekt/ratemycourse/frontend/src/enhancers/InjectStarRating.js",
		"/D/Programming/Projekt/ratemycourse/frontend/src/enhancers/InjectAddCommentsComponent.js",
		"/D/Programming/Projekt/ratemycourse/frontend/src/enhancers/InjectAddCommentButton.js",
		"/D/Programming/Projekt/ratemycourse/frontend/src/components/ProfileInfo.js",
		"/D/Programming/Projekt/ratemycourse/frontend/src/components/ProfileView.js",
		"/D/Programming/Projekt/ratemycourse/frontend/src/containers/ProfilePage.js",
		"/D/Programs/Steam/steamapps/common/SourceFilmmaker/game/sdktools/maya/scripts/valvesource/vsLoadFile.mel",
		"/D/Programming/Projekt/ratemycourse/frontend/src/components/CardsView.js",
		"/D/Programming/Projekt/ratemycourse/backend/src/public/courselist.xsl",
		"/D/Programming/Projekt/ratemycourse/frontend/src/enhancers/InjectCommentNumber.js",
		"/D/Programming/Projekt/ratemycourse/frontend/frontend.sublime-project",
		"/D/Programming/Projekt/ratemycourse/frontend/src/store/Actions.js",
		"/D/Programming/Projekt/ratemycourse/backend/src/server.js",
		"/D/Programming/Projekt/ratemycourse/frontend/src/store/Reducers.js",
		"/D/Programming/Projekt/ratemycourse/frontend/src/scss/_base.scss",
		"/D/Programming/Projekt/ratemycourse/frontend/src/enhancers/ErrorScreenOnError.js",
		"/D/Programming/Projekt/ratemycourse/frontend/src/scss/Header.scss",
		"/D/Programming/Projekt/ratemycourse/frontend/src/components/Header.js",
		"/D/Programming/Projekt/ratemycourse/frontend/src/containers/MainPage.js",
		"/D/Programming/Projekt/ratemycourse/frontend/src/scss/_palette.scss",
		"/D/Programming/Projekt/ratemycourse/frontend/src/components/ControlBar.js",
		"/D/Programming/Projekt/ratemycourse/frontend/src/scss/FilterBar.scss",
		"/D/Programming/Projekt/ratemycourse/frontend/src/components/FilterSearch.js",
		"/D/Programming/Projekt/ratemycourse/frontend/src/containers/CourseListPage.js",
		"/D/Programming/Projekt/ratemycourse/frontend/node_modules/bootstrap/dist/css/bootstrap-grid.css",
		"/D/Programming/Projekt/ratemycourse/frontend/src/components/FilterBar.js",
		"/D/Programming/Projekt/ratemycourse/frontend/src/boilerplate/componentBoilerplate.js",
		"/D/Programming/Projekt/ratemycourse/frontend/src/containers/LoginPage.js",
		"/D/Programming/Projekt/ratemycourse/frontend/src/enhancers/LoadScreenWhileLoading.js",
		"/D/Programming/Projekt/ratemycourse/frontend/src/scss/_custom.scss",
		"/D/Programming/Projekt/ratemycourse/frontend/src/containers/RegisterPage.js",
		"/D/Programming/Projekt/ratemycourse/frontend/src/scss/LoadScreenWhileLoading.scss",
		"/D/Programming/Projekt/ratemycourse/frontend/src/components/MainView.js",
		"/D/Programming/Projekt/ratemycourse/frontend/src/components/CourseComments.js",
		"/D/Programming/Projekt/ratemycourse/frontend/src/components/StarRating.js",
		"/D/Programming/Projekt/ratemycourse/frontend/src/enhancers/ApplyCourseRoute.js",
		"/D/Programming/Projekt/ratemycourse/frontend/src/components/Star.js",
		"/D/Programming/Projekt/ratemycourse/frontend/src/enhancers/injectStarRating.js",
		"/D/Programming/Projekt/ratemycourse/frontend/src/App.js",
		"/D/Programming/Projekt/ratemycourse/frontend/src/scss/CourseView.scss",
		"/D/Programming/Projekt/ratemycourse/frontend/src/helperFunctions/LoadingGroup.js",
		"/C/Users/johan/Downloads/FTBInfinityServer_3.0.2/server.properties",
		"/D/Programming/Projekt/ratemycourse/frontend/src/scss/CardsView.scss",
		"/D/Programming/Projekt/ratemycourse/frontend/src/helperFunctions/ApiRequests.js",
		"/D/Programming/Projekt/ratemycourse/frontend/src/containers/MainContainer.js",
		"/D/Programming/Projekt/ratemycourse/frontend/src/containers/Course.js",
		"/D/Programming/Projekt/ratemycourse/backend/node_modules/bluebird/js/browser/bluebird.js",
		"/D/Programming/Projekt/ratemycourse/frontend/src/index.html",
		"/D/Programming/Projekt/ratemycourse/frontend/src/containers/Header.js",
		"/D/Programming/Projekt/ratemycourse/backend/src/public/coursePage.xsl",
		"/D/Programming/Projekt/ratemycourse/frontend/src/components/GenerateStars.js",
		"/D/Programming/Projekt/ratemycourse/frontend/webpack.config.js",
		"/D/Programming/Projekt/ratemycourse/frontend/src/containers/CourseContainer.js",
		"/D/Programming/Projekt/ratemycourse/frontend/src/index.js",
		"/D/Programming/Projekt/ratemycourse/frontend/devServer.js",
		"/D/Programming/Projekt/ratemycourse/backend/src/devServer.js",
		"/D/Programming/Projekt/ratemycourse/frontend/node_modules/webpack-dev-server/bin/webpack-dev-server.js",
		"/D/Programming/Projekt/ratemycourse/frontend/node_modules/webpack-dev-server/lib/Server.js",
		"/D/Programming/Projekt/ratemycourse/frontend/src/containers/Container.js",
		"/D/Programming/Projekt/ratemycourse/frontend/src/components/CourseWrapper.js",
		"/D/Programming/Projekt/ratemycourse/frontend/src/containers/Main.js",
		"/D/Programming/Projekt/ratemycourse/frontend/src/containers/Login.js",
		"/D/Programming/Projekt/ratemycourse/frontend/package.json",
		"/D/Programming/Projekt/ratemycourse/frontend/src/scss/StarRating.scss",
		"/D/Programming/Projekt/ratemycourse/frontend/src/components/LoadScreenWhileLoading.js",
		"/D/Programming/Projekt/ratemycourse/frontend/node_modules/recompose/lifecycle.js",
		"/D/Programming/Projekt/ratemycourse/frontend/node_modules/jquery-bar-rating/jquery.barrating.js",
		"/D/Programming/Projekt/ratemycourse/frontend/src/scss/_fonts.scss",
		"/D/Programming/Projekt/ratemycourse/frontend/node_modules/bootstrap/scss/_variables.scss",
		"/D/Programming/Projekt/ratemycourse/frontend/src/components/Login.js",
		"/D/Programming/Projekt/ratemycourse/frontend/node_modules/bootstrap/scss/_media.scss",
		"/D/Programming/Projekt/ratemycourse/frontend/node_modules/bootstrap/scss/_print.scss",
		"/D/Programming/Projekt/ratemycourse/frontend/node_modules/bootstrap/scss/_type.scss",
		"/D/Programming/Projekt/ratemycourse/frontend/src/scss/Login.scss",
		"/D/Programming/Projekt/ratemycourse/frontend/node_modules/bootstrap/scss/_forms.scss",
		"/D/Programming/Projekt/ratemycourse/frontend/node_modules/bootstrap/scss/bootstrap.scss",
		"/C/Users/johan/AppData/Roaming/Sublime Text 3/Packages/SublimeCodeIntel/SublimeCodeIntel.sublime-settings",
		"/D/Programming/Projekt/ratemycourse/frontend/src/scss/CourseCard.scss",
		"/D/Programming/Projekt/ratemycourse/frontend/src/components/CourseCard.js",
		"/D/Programming/Projekt/ratemycourse/frontend/src/components/InputBox.js",
		"/D/Programming/Projekt/ratemycourse/frontend/src/scss/Main.scss",
		"/D/Programming/Projekt/ratemycourse/frontend/src/components/Register.js",
		"/D/Programming/Projekt/hundskalle/src/scss",
		"/D/Programming/Projekt/hundskalle/webpack.config.js",
		"/D/Programming/Projekt/hundskalle/package.json",
		"/D/Programming/Projekt/hundskalle/src/_custom.scss",
		"/D/Programming/Projekt/hundskalle/src/index.js",
		"/D/Programming/Projekt/ratemycourse/frontend/src/components/SearchBar.js",
		"/D/Programming/Projekt/ratemycourse/frontend/src/store/CreateStore.js",
		"/D/Programming/Projekt/ratemycourse/frontend/src/components/CardsView.css",
		"/D/Programming/Projekt/ratemycourse/frontend/src/components/FilterBar.css",
		"/D/Programming/Projekt/ratemycourse/frontend/src/containers/CardsContainer.js",
		"/D/Programming/Projekt/ratemycourse/frontend/src/components/Main.js",
		"/D/Programming/Projekt/ratemycourse/frontend/src/store/PromiseMiddleware.js",
		"/D/Programming/Projekt/ratemycourse/frontend/src/helperFunctions/ParseCourseXML.js",
		"/D/Programming/Projekt/ratemycourse/frontend/src/helperFunctions/CoursesXMLsplit.js",
		"/C/Users/johan/Downloads/FTBHorizonsIIIServer_1.4.0/server.properties",
		"/C/Users/johan/Downloads/Project_Ozone_2-Server-v.2.4.0/server.properties",
		"/D/Programming/Projekt/ratemycourse/frontend/src/components/Header.css",
		"/D/Programming/Projekt/ratemycourse/backend/src/public/departmentlist.xsl",
		"/C/Users/johan/AppData/Local/Temp/7zEC9242ECC/coffeeresponsibility.php",
		"/C/Users/johan/Google Drive/Skola/XML for Publishing/Lab2/lab-xslt/nyheter.xml",
		"/C/Users/johan/Google Drive/Skola/XML for Publishing/Lab2/lab-xslt/nyheter-wml.xsl",
		"/C/Users/johan/AppData/Local/Temp/7zEC92477AF/coffeeresponsibility.php",
		"/D/Programming/Projekt/ratemycourse/frontend/src/components/Main.css",
		"/D/Programming/Projekt/ratemycourse/frontend/src/components/Card.css",
		"/D/Programming/Projekt/redux tutorial/redux-tutorial/05_combine-reducers.js",
		"/D/Programming/Projekt/ratemycourse/backend/JSONS/DD.json",
		"/D/Programming/Projekt/ratemycourse/frontend/src/components/LoadScreenWhileLoading.css",
		"/D/Programming/Projekt/ratemycourse/frontend/src/components/SearchBar.css",
		"/D/Programming/Projekt/ratemycourse/frontend/src/components/CardView.css",
		"/D/Programming/Projekt/ratemycourse/frontend/.babelrc",
		"/D/Programming/Projekt/ratemycourse/frontend/src/components/CardView.js",
		"/D/Programming/Projekt/ratemycourse/frontend/src/containers/CardScreen.js",
		"/D/Programming/Projekt/ratemycourse/frontend/src/services/FetchCourses.js",
		"/D/Programming/Projekt/ratemycourse/backend/.eslintrc.js",
		"/D/Programming/Projekt/ratemycourse/frontend/eslint/common.js",
		"/D/Programming/Projekt/ratemycourse/backend/eslint/common.js",
		"/D/Programming/Projekt/ratemycourse/backend/eslint/react.js",
		"/D/Programming/Projekt/ratemycourse/backend/package.json",
		"/D/Programming/Projekt/ratemycourse/frontend/src/actions/fetchCourses.js",
		"/D/Programming/Projekt/ratemycourse/frontend/src/store/courses/Actions.js"
	],
	"find":
	{
		"height": 51.0
	},
	"find_in_files":
	{
		"height": 141.0,
		"where_history":
		[
			"D:\\Programming\\Projekt\\ratemycourse\\frontend\\src",
			"<open files>",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"alter",
			"alter_user",
			"includes",
			"onSubmit",
			"comment",
			"courseId",
			"comment",
			"bool",
			"enableSubmit",
			"delete",
			"loading",
			"match",
			"replace",
			"user",
			"register",
			"alertLogin",
			"setCommentEdit",
			"onEditComment",
			"none",
			"flex",
			"userReducer",
			"course",
			"console.log",
			"TiHome",
			"white",
			"outline",
			"Outline",
			"outline",
			"Outline",
			"outline",
			"Outline",
			"outline",
			"secondaryColor",
			"tetriaryColor",
			"{ colors.tetriaryColor }",
			"}\n",
			"outline",
			"10px",
			"outline",
			"Component",
			"userScore",
			"link",
			"starrating.scss",
			"starrating",
			"false",
			"match",
			"xslt",
			"tetriary",
			"console.log",
			"apiRequest",
			"LoadingGroup.",
			"LoadingGroup",
			"state.loadingGroup",
			"loading",
			"props",
			"this.",
			"var",
			"(?-i)courses",
			"courses?-i",
			"courses(?i)",
			"courses(?-i)",
			"/courses/",
			"courses",
			"console.log",
			"profileButton",
			"inline",
			"\""
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"CourseComments",
			"score",
			"state.loadingGroup.",
			"state.loadingGroup",
			"LoadingGroup",
			"loadingGroup",
			"this.props",
			"",
			"courseList",
			"'"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": false
	},
	"groups":
	[
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "src/containers/ProfilePage.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2026,
						"regions":
						{
						},
						"selection":
						[
							[
								826,
								826
							]
						],
						"settings":
						{
							"auto_complete": false,
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
									"1":
									[
										411,
										412
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"region.yellowish"
									]
								},
								"open":
								{
									"1":
									[
										390,
										391
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										1368,
										1369
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"region.yellowish"
									]
								},
								"open":
								{
									"1":
									[
										776,
										777
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Babel/JavaScript (Babel).tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 225.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "src/components/ProfileSideBar.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 482,
						"regions":
						{
						},
						"selection":
						[
							[
								26,
								26
							]
						],
						"settings":
						{
							"auto_complete": false,
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
									"1":
									[
										438,
										439
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"region.yellowish"
									]
								},
								"open":
								{
									"1":
									[
										101,
										102
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Babel/JavaScript (Babel).tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "src/components/ProfileInfo.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3847,
						"regions":
						{
						},
						"selection":
						[
							[
								2320,
								2320
							]
						],
						"settings":
						{
							"auto_complete": false,
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
									"1":
									[
										905,
										906
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										870,
										871
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										2319,
										2320
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/double_quote.png",
										"region.greenish"
									]
								},
								"open":
								{
									"1":
									[
										2312,
										2313
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Babel/JavaScript (Babel).tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 900.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		},
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 3,
					"file": "src/store/Reducers.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12371,
						"regions":
						{
						},
						"selection":
						[
							[
								8654,
								8654
							]
						],
						"settings":
						{
							"auto_complete": false,
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
									"1":
									[
										11610,
										11611
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										11200,
										11201
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										8670,
										8671
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										8418,
										8419
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Babel/JavaScript (Babel).tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5751.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "src/store/Actions.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4718,
						"regions":
						{
						},
						"selection":
						[
							[
								146,
								146
							]
						],
						"settings":
						{
							"auto_complete": false,
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										146,
										147
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"region.yellowish"
									]
								},
								"open":
								{
									"1":
									[
										123,
										124
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Babel/JavaScript (Babel).tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "/D/Programming/Projekt/ratemycourse/backend/src/server.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14153,
						"regions":
						{
						},
						"selection":
						[
							[
								13515,
								13515
							]
						],
						"settings":
						{
							"auto_complete": false,
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
									"1":
									[
										13687,
										13688
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										13385,
										13386
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										13687,
										13688
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										13385,
										13386
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Babel/JavaScript (Babel).tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4034.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 50.0
	},
	"input":
	{
		"height": 47.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.614662095832,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.SQLTools Result":
	{
		"height": 513.0
	},
	"output.exec":
	{
		"height": 332.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.git-commit":
	{
		"height": 103.0
	},
	"output.git-pull":
	{
		"height": 130.0
	},
	"output.git-push":
	{
		"height": 106.0
	},
	"output.markdown":
	{
		"height": 148.0
	},
	"output.mdpopups":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/User/xml.sublime-build",
	"project": "frontend.sublime-project",
	"replace":
	{
		"height": 96.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"createprojectfr",
				"src\\client\\stores\\MultiStep\\CreateProjectFormStore.js"
			],
			[
				"date",
				"src\\client\\components\\forms\\DateInput.js"
			],
			[
				"dateinp",
				"src\\client\\components\\forms\\DateInput.js"
			],
			[
				"stepsetprojectend",
				"src\\client\\pages\\CreateProjectPage\\steps\\StepSetProjectEnd.js"
			],
			[
				"setstart",
				"src\\client\\pages\\CreateProjectPage\\steps\\StepSetProjectStart.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"D:\\Programming\\DatabasLabbar\\databaslabbar.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 315.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
